// Player.h

class Player : public GameObject
{
public:
	float speed;
	Player() : speed(100) { width = 200; height = 200; }

	virtual void update()
	{
		GameObject::update();

		if (sfw::getKey(' '))
		{
			animTimer = 0;
			animationName = "NOTVERYBOOM";
		}

		if (animTimer > getAnimationDuration(textureName,animationName))
		{
			animTimer = 0;
			animationName = "BOOM";
		}

		float sdt = sfw::getDeltaTime() * speed;
		if (sfw::getKey('W')) y += sdt; // Euler integration
		if (sfw::getKey('S')) y -= sdt;
		if (sfw::getKey('A')) x -= sdt;
		if (sfw::getKey('D')) x += sdt;
	}
};


// GameObject.h

class GameObject
{
public:
	float x, y, width, height, angle;			// Just the vars necessary for drawing
	
	std::string textureName, animationName;		// Information for animation
	float animTimer;	
	unsigned currentFrame;

	GameObject() :x(400),y(300),
				width(60),height(60),
					angle(0),
					currentFrame(0), animTimer(0) {}
	
	// See the main.cpp for an example of how concise the drawing code looks now.
	virtual void draw() 
	{
		sfw::drawTexture(getTexture(textureName),x,y,
							width,height,angle,true,currentFrame);
	}

	virtual void update()
	{
		animTimer += sfw::getDeltaTime();
		currentFrame = sampleAnimation(textureName, animationName, animTimer);
	} 
};


// Collision Detection
#include <cmath>

float iText_Circle(float x1, float y1, float r1, float x2, float y2, float r2)
{
	return (r1 + r2) - sqrtf((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}


float iTest_Rect (float x1, float y1, float hw1, float hh1, float x2, float y2, float hw2, float hh2)
{
	// Top, Bottom, Left and Right Extents
	float t1 = y1 + hh1;
	float b1 = y1 - hh1;
	float l1 = x1 - hw1;
	float r1 = x1 + hw1;
	
	float t2 = y2 + hh2;
	float b2 = y2 - hh2;
	float l2 = x2 - hw2;
	float r2 = x2 + hw2;
	
	
	float xt = fmin(r1 - l2, rw - l1);
	float yt = fmin(t1 - b2, t2 - b1);
	
	return fmin(xt, xy); 
}

float clamp(float min, float max, float val)
{
	return fmax((fmin(max, val), min), min);
}

float iTest_CircleVsRect(float x1, float y1, float r1, float x2, float y2, float hw2, float hh2)
{
float px = clamp(x2  - hw2, x2 + hw2, x1);
float py = clamp(y2 - hh2, y2 + hh2, y1);

return iTest_Circle(x1, y1, r1, px, py, 0);

}